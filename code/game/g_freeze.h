#ifndef FREEZE__H
#define FREEZE__H

void SendTimeoutEvent( void );
void SaveGameState();
qboolean is_spectator( gclient_t *client );
void RespawnSpectatingClient( gentity_t *ent );
void CopyFollowedPlayerState( gentity_t *ent, playerState_t *ps, clientSession_t *sess, gclient_t *cl );
void Body_free( gentity_t *self );
void Body_think( gentity_t *self );
qboolean DamageBody( gentity_t *targ, gentity_t *attacker, vec3_t dir, int damage, int mod );
qboolean is_body( gentity_t *ent );
qboolean is_body_freeze( gentity_t *ent );
void player_freeze( gentity_t *self, gentity_t *attacker, int mod );
qboolean readyCheck( void );
void team_wins( int team );
qboolean IsClientFrozen( gentity_t *ent );
qboolean IsClientOOC( gentity_t *ent );
void CheckDelay( void );
void locationSpawn( gentity_t *ent, gitem_t *item );
void Hook_Fire( gentity_t *ent );
void Cmd_Drop_f( gentity_t *ent );
void Cmd_Autofollow_f( gentity_t *ent );
void G_SendAllClientStats( void );
qboolean CheckClientNum( gentity_t *ent, int clientNum );
void Cmd_Ignore_f( gentity_t *ent, qboolean ignore );
void Cmd_Stats_f( gentity_t *ent );
void Cmd_Record_f( gentity_t *ent );
void Cmd_StatsAcc_f( gentity_t *ent );
void Cmd_Topshots_f( gentity_t *ent, qboolean top );
void Cmd_Bottomshots_f( gentity_t *ent );
void Cmd_StatsBlue_f( gentity_t *ent );
void Cmd_StatsRed_f( gentity_t *ent );
void Cmd_StatsAll_f( gentity_t *ent );
void Cmd_StatsTeam_f( gentity_t *ent );
void Cmd_StatsTeamRed_f( gentity_t *ent );
void Cmd_StatsTeamBlue_f( gentity_t *ent );
void Cmd_StatsTeamAll_f( gentity_t *ent );
void Cmd_Clients_f( gentity_t *ent );
void Cmd_Ready_f( gentity_t *ent );
void Cmd_NotReady_f( gentity_t *ent );
void Cmd_TimeIn_f( gentity_t *ent );
void Cmd_TimeOut_f( gentity_t *ent );
void Cmd_Lock_f( gentity_t *ent );
void Cmd_Unlock_f( gentity_t *ent );
void Cmd_Ref_f( gentity_t *ent );
void Cmd_Unref_f( gentity_t *ent );
void Cmd_RefKick_f( gentity_t *ent );
void Cmd_RefRemove_f( gentity_t *ent );
void Cmd_RefPutRed_f( gentity_t *ent );
void Cmd_RefPutBlue_f( gentity_t *ent );
void Cmd_RefPutRedCoach_f( gentity_t *ent );
void Cmd_RefPutBlueCoach_f( gentity_t *ent );
void Cmd_RefSwap_f( gentity_t *ent );
void Cmd_RefMakeRef_f( gentity_t *ent );
void Cmd_RefBan_f( gentity_t *ent );
void Cmd_RefMute_f( gentity_t *ent );
void Cmd_RefClients_f( gentity_t *ent );
void Cmd_RefRestart_f( gentity_t *ent );
void Cmd_RefAllReady_f( gentity_t *ent );
void Cmd_RefAllNotReady_f( gentity_t *ent );
void Cmd_RefLock_f( gentity_t *ent );
void Cmd_RefLockBlue_f( gentity_t *ent );
void Cmd_RefLockRed_f( gentity_t *ent );
void Cmd_RefUnlock_f( gentity_t *ent );
void Cmd_RefUnlockBlue_f( gentity_t *ent );
void Cmd_RefUnlockRed_f( gentity_t *ent );
void Cmd_RefSpecLock_f( gentity_t *ent );
void Cmd_RefSpecLockBlue_f( gentity_t *ent );
void Cmd_RefSpecLockRed_f( gentity_t *ent );
void Cmd_RefSpecUnlock_f( gentity_t *ent );
void Cmd_RefSpecUnlockBlue_f( gentity_t *ent );
void Cmd_RefSpecUnlockRed_f( gentity_t *ent );
void Cmd_RefTimein_f( gentity_t *ent );
void Cmd_RefTimeout_f( gentity_t *ent );
void Cmd_RefMap_f( gentity_t *ent );
void Cmd_RefNextmap_f( gentity_t *ent );
void Cmd_RefAddIP_f( gentity_t *ent );
void Cmd_RefRemoveIP_f( gentity_t *ent );
void Cmd_RefListIP_f( gentity_t *ent );
void Cmd_RefInvisible_f( gentity_t *ent );
void Cmd_RefWallhack_f( gentity_t *ent );
void Cmd_RefVote_f( gentity_t *ent );
void Cmd_Help_f( gentity_t *ent );
void Cmd_Coach_f( gentity_t *ent );
void Cmd_CoachInvite_f( gentity_t *ent );
void Svcmd_Remove_f( void );
void Svcmd_PutBlue_f( void );
void Svcmd_PutRed_f( void );
void Svcmd_HardRestart_f( void );
qboolean WeaponDisabled( gitem_t *item );
void RegisterWeapon( void );
void SpawnWeapon( gclient_t *client );
int InvulnerabilityEffect( gentity_t *targ, vec3_t dir, vec3_t point, vec3_t impactpoint, vec3_t bouncedir );
void BG_RemoveColors( char *str );
void G_BodyMove( gentity_t *ent );
int G_NumPlayersConnecting( void );
gentity_t *SelectBestFreezeSpawnPoint ( gentity_t *ent, vec3_t avoidPoint, vec3_t origin, vec3_t angles );
qboolean G_CheckFPCmd( gentity_t *ent );

#endif
